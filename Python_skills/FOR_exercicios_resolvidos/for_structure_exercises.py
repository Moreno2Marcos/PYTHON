# -*- coding: utf-8 -*-
"""for_structure_exercises.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Ne-EIMnTrAEZdh8If0CLvSU2K1Uqudi

**Exercise:** Write a Python program using a `for` loop to print the numbers from 1 to 10.
"""

for number in range( 1, 11 ):
    print( number )

"""**Exercise:** Write a Python program that iterates through a list of numbers and prints only the even numbers using a `for` loop and an `if` statement.

Here's the list: `numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`
"""

# 1. create the list
numbers = range( 1, 11 )

# 2. print only the even numbers
for number in numbers:
    if number % 2 == 0:
        print( number )

# Another way to print only the even numbers using list comprehension
numbers = range(1, 11)
even_numbers = [number for number in numbers if number % 2 == 0]
print(even_numbers)

"""**Exercise:** Write a Python program that takes a string as input and counts the number of vowels (a, e, i, o, u) in the string using a `for` loop."""

# 1. ask user enter a string
string = input( "Enter a string: " )

# 2. count and print the number of vowels
count = 0
vowels = ( "a", "e", "i", "o", "u" )

for c in string.strip():
    if c.lower() in vowels:
        count += 1

print( count )

# Another way to count the number of vowels
string = input( "Enter a string: " )
vowels = ( "a", "e", "i", "o", "u" )
count = sum(1 for char in string.strip().lower() if char in vowels)
print(count)

"""**Exercise:** Write a Python program that takes a list of dictionaries as input. Each dictionary represents a person with keys like 'name' and 'age'. Iterate through the list and create a new dictionary where the keys are the names of the people and the values are their ages.

Here's the list of dictionaries:

people = [
    { 'name': 'Alice', 'age': 30 },
    { 'name': 'Bob', 'age': 25 },
    { 'name': 'Charlie', 'age': 35 },
    { 'name': 'David', 'age': 28 }
]

### Basic solution
"""

# 1. create the input data
people = [
    { 'name': 'Alice', 'age': 30 },
    { 'name': 'Bob', 'age': 25 },
    { 'name': 'Charlie', 'age': 35 },
    { 'name': 'David', 'age': 28 }
]

# 2. create a new dictionary as especifified and visualize result

# 2.1. create the data strtuctures as needed
names = []
ages = []
new_dictionary = {}

# 2.2. extract names and ages
for person in people:
    for k, v in person.items():
        if k == 'name':
            names.append( v )
        else:
            ages.append( v )

# 2.3. build the new dictionary and print result (wrong)
# for name in names:
#     for age in ages:
#         new_dictionary[ name ] = age  ## (explanation) each name iterates over all ages. Thatâ€™s why every name ends up with the last age.

# 2.3. build the new dictionary and print result (correct)
for i in range( len( names ) ):
    new_dictionary[ names[ i ] ] = ages[ i ]

print( new_dictionary )

"""### Advanced solution"""

# Input data
people = [
    { 'name': 'Alice', 'age': 30 },
    { 'name': 'Bob', 'age': 25 },
    { 'name': 'Charlie', 'age': 35 },
    { 'name': 'David', 'age': 28 }
]

# Optimized solution
new_dictionary = { person['name']: person['age'] for person in people }  # dictionary comprehension concept!

# Output result
print(new_dictionary)